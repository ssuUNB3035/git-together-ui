// Generated by view binder compiler. Do not edit!
package ca.unb.mobiledev.gittogetherui.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import ca.unb.mobiledev.gittogetherui.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final TextView cardDescription;

  @NonNull
  public final TextView cardTags;

  @NonNull
  public final TextView cardTitle;

  @NonNull
  public final View itemSwipeLeftIndicator;

  @NonNull
  public final View itemSwipeRightIndicator;

  private ItemBinding(@NonNull FrameLayout rootView, @NonNull TextView cardDescription,
      @NonNull TextView cardTags, @NonNull TextView cardTitle, @NonNull View itemSwipeLeftIndicator,
      @NonNull View itemSwipeRightIndicator) {
    this.rootView = rootView;
    this.cardDescription = cardDescription;
    this.cardTags = cardTags;
    this.cardTitle = cardTitle;
    this.itemSwipeLeftIndicator = itemSwipeLeftIndicator;
    this.itemSwipeRightIndicator = itemSwipeRightIndicator;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.card_description;
      TextView cardDescription = ViewBindings.findChildViewById(rootView, id);
      if (cardDescription == null) {
        break missingId;
      }

      id = R.id.card_tags;
      TextView cardTags = ViewBindings.findChildViewById(rootView, id);
      if (cardTags == null) {
        break missingId;
      }

      id = R.id.card_title;
      TextView cardTitle = ViewBindings.findChildViewById(rootView, id);
      if (cardTitle == null) {
        break missingId;
      }

      id = R.id.item_swipe_left_indicator;
      View itemSwipeLeftIndicator = ViewBindings.findChildViewById(rootView, id);
      if (itemSwipeLeftIndicator == null) {
        break missingId;
      }

      id = R.id.item_swipe_right_indicator;
      View itemSwipeRightIndicator = ViewBindings.findChildViewById(rootView, id);
      if (itemSwipeRightIndicator == null) {
        break missingId;
      }

      return new ItemBinding((FrameLayout) rootView, cardDescription, cardTags, cardTitle,
          itemSwipeLeftIndicator, itemSwipeRightIndicator);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
